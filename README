RTG Aggregator
==============

One of the prominent features of RTG is that there is no averaging
involved after the actual poll. This can be advantageous, but if you poll
data with for many devices at a short interval, say one minute, you soon
end up with hunreds of gigabytes of data. RTG Aggregator (hereafter
"aggregator") is a solution to that problem.

With aggregator you specify a rule set for how you want old data to be
managed. This can be a stepwise degradation of precision over time, with
the possibility of dropping data older than a certain threshold.
Configuration is done flexibly in Ruby. An example aggregator script,
complete and working, looks like this:

 1: a = Aggregator.new
 2: a.database = { :host => ..., :user => ..., :password => ..., :database => ... }
 3: a.rules << { :table => /^if/, :age => 1.month, :reduce => 15.minute }
 4: a.rules << { :table => /^if/, :age => 6.month, :reduce => 1.hour }
 5: a.rules << { :table => /^if/, :age => 2.year,  :reduce => 8.hour }
 6: a.rules << { :table => /^adsl|^dlink/, :age => 1.month, :reduce => 1.hour }
 7: a.rules << { :table => /^adsl|^dlink/, :age => 1.year,  :reduce => 1.day }
 8: a.rules << { :table => :all, :age => 3.year,  :drop => true }
 9: a.runlimit = 50.minute
10: a.verbose = true
11: a.run

Going through this, line by line, we see:

1: Create an aggregator object.

2: Set the database access parameters. This needs to be a MySQL database
   following the "traditional" RTG schema.

3-5: Create rules for tables matching the ^if regexp (ifInOctets and
     friends) stating that data should be reduced, so that data older
     than two years is in eight hour averages, data between six months
     and years old should be reduced to hourly averages, and finally data
     between one and six months old should be kept in 15 minute averages.

6-7: Create rulesq for tables matching ^adsl or ^dlink that reduces data
     in the same fashion as above.

8: Create a rule that matches all tabled and deletes data older than
   three years.

9: Set a limit that the script will run for no more than 50 minutes
   (roughly). This is useful if it is being run from cron, for example.

10: Set the verbose flag to get some output describing what it's doing.

11: Start the processing.
